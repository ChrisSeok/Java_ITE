<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" 
	"mybatis-3-mapper.dtd" >

<mapper namespace="booksearch.mybook">  <!-- 어떤 mapper의 어떤 id인지로 구분해서 쓸거에용. namespace는 패키지 따라 지으면 좋다. -->

	<!-- 같은 쿼리문이 있을 수 있으니 id로 구분해서 쓸거에용 -->
	<!-- ISBN 번호를 인자로 받아야 함 -->

	<select id="selectLike" parameterType="String"
		resultType="BookVO">

		
		<!-- 대소문자 등을 꺾쇠로 인식할 수 있으므로 CDATA로 쿼리를 감싸준다 -->
		
		<![CDATA[
		SELECT bisbn, btitle, bprice, bauthor 
		FROM book 
		WHERE btitle like CONCAT('%', #{keyword}, '%')]]>       <!-- 코드상에서 keyword이라는 이름으로 인자를 전달해야 한다. -->

	</select>



	<delete id="deleteBook" parameterType="String">
		<!-- 컬럼명과 BookVO의 필드명이 같아야 한다. 다르면 또 조치를 취해줘야함. -->
		<![CDATA[
		DELETE 
		FROM book 
		WHERE bisbn = #{deleteIsbn}
		]]>
	</delete>



<!-- update,delete,insert - 영향받은 row의 개수가 리턴된다. -->
	<!-- parameter 여러개면 VO 형태로 인자를 받는다. -->	
	<update id="titleUpdate" parameterType="BookVO">   <!-- parameter 두개 이상 넘기려면 VO에 담아서 VO를 넘겨야해! -->
		<![CDATA[
			UPDATE book
			SET btitle = #{btitle}   
			WHERE bisbn = #{bisbn}
		]]>
	</update>



<!--  MyBatis의 <resultMap> 요소를 사용하여 데이터베이스의 열(column)과 자바 객체의 필드를 매핑하는 규칙을 정의하고 있습니다. 
이 규칙은 주로 데이터베이스 결과를 자바 객체로 매핑하는 데 사용됩니다. -->

	<!-- 맵핑 규칙 : 컬럼명과 BookVO의 필드를 매핑시킨다 -->
	<resultMap type="BookVO" id="result_1">
		<!-- 각 <result> 요소는 데이터베이스 열(column)과 자바 객체의 특정 속성(property) 사이의 매핑을 정의합니다 -->
		<result property="bisbn" column="my_isbn" jdbcType="VARCHAR" javaType="String" /> <!-- db 칼럼 타입과 java의 타입이 다를 경우 변환 -->
		<result property="btitle" column="my_title" />
		<result property="bprice" column="my_price" />
		<result property="bauthor" column="my_author" />
	</resultMap>




</mapper>
